// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}


model Account {
  id                String  @id @default(cuid()) @map("_id") 
  userId            String  
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id") 
  sessionToken String   @unique
  userId       String   
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id") 
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}


enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // role based type
  role UserRole @default(USER)

  // each User has Post and Comment Array 
  Post    Post[]
  Comment Comment[]
}
model Category {
  id    String  @id @default(cuid()) @map("_id")
  slug  String  @unique
  title String
  img   String?
  Posts Post[]
}

model Post {
  id        String    @id @default(cuid()) @map("_id")
  createdAt DateTime  @default(now())
  slug      String    @unique
  title     String
  desc      String
  img       String?
  views     Int       @default(0)
  catSlug   String
  cat       Category  @relation(fields: [catSlug], references: [slug])
  userEmail String
  user      User      @relation(fields: [userEmail], references: [email])
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  desc      String
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
}

// * Aashish
// model Post {
//   id        String    @id @default(cuid()) @map("_id") @db.ObjectId
//   slug      String    @unique
//   title     String
//   body      String
//   imageUrl  String    // Field to store the image URL
//   category  String
//   author    User      @relation(fields: [authorId], references: [id])
//   authorId  String    @db.ObjectId
//   comments  Comment[]
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
// }

//*LAMA DEV*//
// model Post {
//   id        String   @id @default(cuid()) @map("_id")
//   slug      String   @unique
//   title     String
//   img       String?
//   views     Int      @default(0)
//   catSlug   String
//   cat       Category @relation(fields: [catSlug], references: [slug]) // find relation between Post slug and catSlug
//   userEmail String
//   user      User     @relation(fields: [userEmail], references: [email])
//   comments Comment[]
// }

// model Comment {
//   id        String   @id @default(cuid()) @map("_id")
//   createdAt DateTime @default(now())
//   desc      String
//   userEmail String
//   user      User     @relation(fields: [userEmail], references: [email])
//   postSlug String
//   post      Post     @relation(fields: [postSlug], references: [slug])
// }
